# cssh(1) completion                                       -*- shell-script -*-

_cssh_clusters()
{
    COMPREPLY+=( $( compgen -W \
        "$( awk '{ print $1 }' ~/.clusterssh/clusters )" -- "$cur" ) )
}

_cssh_ciphers()
{
    COMPREPLY+=( $( compgen -W '3des-cbc aes128-cbc \
        aes192-cbc aes256-cbc aes128-ctr aes192-ctr aes256-ctr arcfour128 \
        arcfour256 arcfour blowfish-cbc cast128-cbc' -- "$cur" ) )
}

_cssh_macs()
{
    COMPREPLY+=( $( compgen -W 'hmac-md5 hmac-sha1 \
        umac-64@openssh.com hmac-ripemd160 hmac-sha1-96 hmac-md5-96' \
        -- "$cur" ) )
}

_cssh_options()
{
    compopt -o nospace
    COMPREPLY=( $( compgen -S = -W '--action -a --autoclose -A --autoquit
        -q|--no-autoquit -Q --cluster-file -c --config-file -C --debug
        --evaluate -e --font -f --help -h|-?  --list  -L --man -H --master -M
        --options -o --output-config -u --port -p --show-history -s --tag-file
        -c --term-args -t --tile -g|--no-tile -G --title -T --unique-servers -m
        --use_all_a_records -A --username -l --version -v' -- "$cur" ) )
}

# Complete a ssh suboption (like ForwardAgent=y<tab>)
# Only one parameter: the string to complete including the equal sign.
# Not all suboptions are completed.
# Doesn't handle comma-separated lists.
_cssh_suboption()
{
    # Split into subopt and subval
    local prev=${1%%=*} cur=${1#*=}

    case $prev in
        BatchMode|ChallengeResponseAuthentication|CheckHostIP|\
        ClearAllForwardings|Compression|ExitOnForwardFailure|ForwardAgent|\
        ForwardX11|ForwardX11Trusted|GatewayPorts|GSSAPIAuthentication|\
        GSSAPIKeyExchange|GSSAPIDelegateCredentials|GSSAPITrustDns|\
        HashKnownHosts|HostbasedAuthentication|IdentitiesOnly|\
        KbdInteractiveAuthentication|KbdInteractiveDevices|\
        NoHostAuthenticationForLocalhost|PasswordAuthentication|\
        PubkeyAuthentication|RhostsRSAAuthentication|RSAAuthentication|\
        StrictHostKeyChecking|TCPKeepAlive|UsePrivilegedPort|\
        VerifyHostKeyDNS|VisualHostKey)
            COMPREPLY=( $( compgen -W 'yes no' -- "$cur") )
            ;;
        AddressFamily)
            COMPREPLY=( $( compgen -W 'any inet inet6' -- "$cur" ) )
            ;;
        BindAddress)
            _ip_addresses
            ;;
        Cipher)
            COMPREPLY=( $( compgen -W 'blowfish des 3des' -- "$cur" ) )
            ;;
        Protocol)
            COMPREPLY=( $( compgen -W '1 2 1,2 2,1' -- "$cur" ) )
            ;;
        Tunnel)
            COMPREPLY=( $( compgen -W 'yes no point-to-point ethernet' \
                    -- "$cur" ) )
            ;;
        PreferredAuthentications)
            COMPREPLY=( $( compgen -W 'gssapi-with-mic host-based \
                    publickey keyboard-interactive password' -- "$cur" ) )
            ;;
        MACs)
            _cssh_macs
            ;;
        Ciphers)
            _cssh_ciphers
            ;;
    esac
    return 0
}

# Try to complete -o SubOptions=
#
# Returns 0 if the completion was handled or non-zero otherwise.
_cssh_suboption_check()
{
    # Get prev and cur words without splitting on =
    local cureq=`_get_cword :=` preveq=`_get_pword :=`
    if [[ $cureq == *=* && $preveq == -o ]]; then
        _cssh_suboption $cureq
        return $?
    fi
    return 1
}

_cssh()
{
    local cur prev words cword
    _init_completion -n : || return

    local configfile
    local -a config

    _cssh_suboption_check && return 0

    case $prev in
        -F|-i|-S)
            _filedir
            return 0
            ;;
        -c)
            _cssh_ciphers
            return 0
            ;;
        -m)
            _cssh_macs
            return 0
            ;;
        -l)
            COMPREPLY=( $( compgen -u -- "$cur" ) )
            return 0
            ;;
        -o)
            _cssh_options
            return 0
            ;;
        -w)
            _available_interfaces
            return 0
            ;;
        -b)
            _ip_addresses
            return 0
            ;;
        -D|-e|-I|-L|-O|-p|-R|-W)
            return 0
            ;;
    esac

    if [[ "$cur" == -F* ]]; then
        cur=${cur#-F}
        _filedir
        # Prefix completions with '-F'
        COMPREPLY=( "${COMPREPLY[@]/#/-F}" )
        cur=-F$cur  # Restore cur
    elif [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_usage "$1" )' -- "$cur" ) )
    else
        # Search COMP_WORDS for '-F configfile' or '-Fconfigfile' argument
        set -- "${words[@]}"
        while [[ $# -gt 0 ]]; do
            if [[ $1 == -F* ]]; then
                if [[ ${#1} -gt 2 ]]; then
                    configfile="$(dequote "${1:2}")"
                else
                    shift
                    [[ $1 ]] && configfile="$(dequote "$1")"
                fi
                break
            fi
            shift
        done
        _known_hosts_real -a -F "$configfile" "$cur"
        _cssh_clusters
        if [[ $cword -ne 1 ]]; then
            compopt -o filenames
            COMPREPLY+=( $( compgen -c -- "$cur" ) )
        fi
    fi

    return 0
} &&
shopt -u hostcomplete && complete -F _cssh cssh


#       --action,-a ’<command>’
#           Run the command in each session, i.e. "-a 'vi /etc/hosts'" to drop
#           straight into a vi session.  NOTE: not all communications methods
#           support this (ssh and rsh should, telnet and console will not).
#
#       --autoclose,-A <seconds>
#           Number of seconds to wait before closing finished terminal windows.
#
#       --autoquit,-q|--no-autoquit,-Q
#           Enable|Disable automatically quiting after the last client window
#           has closed (overriding the config file)
#
#       --cluster-file,-c <file>
#           Use supplied file as additional cluster file (see also "FILES")
#
#       --config-file,-C <file>
#           Use supplied file as additional configuration file (see also "FILES")
#
#       -d  DEPRECATED.  See ’--debug’.
#
#       -D  DEPRECATED.  See ’--debug’.
#
#       --debug [number].
#           Enable debugging.  Either a level can be provided or the option can
#           be repeated multiple times.  Maximum level is 4.
#
#       --evaluate,-e [user@]<hostname>[:port]
#           Display and evaluate the terminal and connection arguments so
#           display any potential errors.  The <hostname> is required to aid the
#           evaluation.
#
#       --font,-f "5x8"
#           Specify the font to use in the terminal windows. Use standard X font
#           notation.
#
#       --help,-h|-?
#           Show basic help text, and exit
#
#       --list, -L
#           List available cluster tags.
#
#       --man,-H
#           Show full help test (the man page), and exit
#
#       --master,-M <master>
#           The console client program polls master as the primary server,
#           rather than the default set at compile time (typically ‘‘console’’).
#
#       --options,-o "-x -o ConnectTimeout=10" - for ssh connections
#       --options,-o ""                        - for rsh connections
#           Specify arguments to be passed to ssh or rsh when making the
#           connection.
#
#           NOTE: any "generic" change to the method (i.e. specifying the ssh
#           port to use) should be done in the medium’s own config file (see
#           "ssh_config" and $HOME/.ssh/config).
#
#       --output-config,-u
#           Output the current configuration in the same format used by the
#           $HOME/.clusterssh/config file.
#
#       --port,-p <port>
#           Specify an alternate port for connections.
#
#       --show-history,-s
#           IN BETA: Show history within console window.  This code is still
#           being worked upon, but may help some users.
#
#       --tag-file,-c <file>
#           Use supplied file as additional tag file (see also "FILES")
#
#       --term-args,-t ""
#           Specify arguments to be passed to terminals being used
#
#       --tile,-g|--no-tile,-G
#           Enable|Disable window tiling (overriding the config file)
#
#       --title,-T "CSSH"
#           Specify the initial part of the title used in the console and client
#           windows
#
#       --unique-servers,-m
#           Connect to each host only once
#
#       --use_all_a_records,-A
#           If a hostname resolves to multiple IP addresses, toggle whether or
#           not to connect to all of them, or just the first one (see also
#           config file entry)
#
#       --username,-l $LOGNAME
#           Specify the default username to use for connections (if different
#           from the currently logged in user).  NOTE: will be overridden by
#           <user>@<host>
#
#       --version,-v
#           Show version information and exit


# ex: ts=4 sw=4 et filetype=sh
