\set QUIET 1

-- Show how long each query takes to execute.
\timing

-- Use table format (with headers across the top) by default, but
-- switch to expanded table format when there's a lot of data, which
-- makes it much easier to read.
\x auto

-- Use a separate command history file for each host and database.
\set HISTFILE ~/.psql_history- :HOST - :DBNAME

-- At most 2000 history entries. We want a lot of history.
\set HISTSIZE 2000

-- If a command is run more than once in a row, only store it in the
-- history once.
\set HISTCONTROL ignoredups

-- Exit at the second EOF to prevent accidental logouts.
\set IGNOREEOF 2

-- Errors are ignored in interactive sessions and not when reading
-- script files.
\set ON_ERROR_ROLLBACK interactive

-- Show when there are NULL values in results rather than empty space.
\pset null '(null)'

-- Tell the server to send us a keepalive message every 60 seconds.
SET tcp_keepalives_idle = 60;

\setenv LESS '-F -i -M -S -X --shift 5'
\pset pager always

\set PROMPT1 '%[%033[33;1m%]%x%[%033[0m%]%[%033[1m%]%/%[%033[0m%]%R%# '

-- Set some variables with queries that we can call

\set settings 'SELECT name, setting, unit, context FROM pg_settings;'

\set locks 'SELECT bl.pid AS blocked_pid, a.usename AS blocked_user, kl.pid AS blocking_pid, ka.usename AS blocking_user, a.query AS blocked_statement FROM pg_catalog.pg_locks bl JOIN pg_catalog.pg_stat_activity a ON bl.pid = a.pid JOIN pg_catalog.pg_locks kl JOIN pg_catalog.pg_stat_activity ka ON kl.pid = ka.pid ON bl.transactionid = kl.transactionid AND bl.pid != kl.pid WHERE NOT bl.granted;'

\set conninfo 'SELECT usename, count(*) FROM pg_stat_activity GROUP BY usename;'

\set activity 'SELECT datname, pid, usename, application_name, client_addr, client_hostname, client_port, query, state FROM pg_stat_activity;'

\set waits 'SELECT pg_stat_activity.pid, pg_stat_activity.query, pg_stat_activity.waiting, now() - pg_stat_activity.query_start AS \"totaltime\", pg_stat_activity.backend_start FROM pg_stat_activity WHERE pg_stat_activity.query !~ \'%IDLE%\'::text AND pg_stat_activity.waiting = true;'

\set dbsize 'SELECT datname, pg_size_pretty(pg_database_size(datname)) db_size FROM pg_database ORDER BY db_size;'

\set tablesize 'SELECT nspname || \'.\' || relname AS \"relation\", pg_size_pretty(pg_relation_size(C.oid)) AS "size" FROM pg_class C LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace) WHERE nspname NOT IN (\'pg_catalog\', \'information_schema\') ORDER BY pg_relation_size(C.oid) DESC LIMIT 40;'

\set uselesscol 'SELECT nspname, relname, attname, typname, (stanullfrac*100)::int AS null_percent, case when stadistinct >= 0 then stadistinct else abs(stadistinct)*reltuples end AS \"distinct\", case 1 when stakind1 then stavalues1 when stakind2 then stavalues2 end AS \"values\" FROM pg_class c JOIN pg_namespace ns ON (ns.oid=relnamespace) JOIN pg_attribute ON (c.oid=attrelid) JOIN pg_type t ON (t.oid=atttypid) JOIN pg_statistic ON (c.oid=starelid AND staattnum=attnum) WHERE nspname NOT LIKE E\'pg\\\\_%\' AND nspname != \'information_schema\' AND relkind=\'r\' AND NOT attisdropped AND attstattarget != 0 AND reltuples >= 100 AND stadistinct BETWEEN 0 AND 1 ORDER BY nspname, relname, attname;'

\set uptime 'SELECT now() - pg_postmaster_start_time() AS uptime;'


\unset QUIET
-- vim:ft=sql
